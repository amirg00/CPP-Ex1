/**
 * @author Amir Gillette
 * @date 2021-03-09
 */

#include "doctest.h"
#include "mat.hpp"
using namespace ariel;

#include <string>
#include <algorithm>
using namespace std;


//======================================/
/***************** Mats ****************/
//======================================/

string Mat = "@@@@@@@@@\n"
             "@-------@\n"
             "@-@@@@@-@\n"
             "@-@---@-@\n"
             "@-@@@@@-@\n"
             "@-------@\n"
             "@@@@@@@@@";

string Mat2 ="@\n"
             "@\n"
             "@\n"
             "@\n"
             "@\n"
             "@\n"
             "@\n"
             "@\n"
             "@\n"
             "@\n"
             "@\n"
             "@\n"
             "@";

string Mat3 = "@@@@@@@@@@@@@";

string Mat4 = "^^^^^\n"
              "^^^^^\n"
              "^^^^^";

string Mat5 = "@";

string Mat6 ="$$$\n"
             "$*$\n"
             "$$$";

string largeMat = "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
              "$***************************************************************************************************$\n"
              "$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$\n"
              "$*$***********************************************************************************************$*$\n"
              "$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$\n"
              "$*$*$*******************************************************************************************$*$*$\n"
              "$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$\n"
              "$*$*$*$***************************************************************************************$*$*$*$\n"
              "$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$\n"
              "$*$*$*$*$***********************************************************************************$*$*$*$*$\n"
              "$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$\n"
              "$*$*$*$*$*$*******************************************************************************$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$***************************************************************************$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$***********************************************************************$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*******************************************************************$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$***************************************************************$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$***********************************************************$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*******************************************************$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$***************************************************$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$***********************************************$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*******************************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***************************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***********************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*******************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***********************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*******************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***********$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*******$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*******$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***********$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*******************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***********************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*******************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***********************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$***************************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*******************************************$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$***********************************************$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$***************************************************$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$*******************************************************$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$***********************************************************$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$***************************************************************$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$*******************************************************************$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$***********************************************************************$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$***************************************************************************$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$*$\n"
              "$*$*$*$*$*$*******************************************************************************$*$*$*$*$*$\n"
              "$*$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$*$\n"
              "$*$*$*$*$***********************************************************************************$*$*$*$*$\n"
              "$*$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$*$\n"
              "$*$*$*$***************************************************************************************$*$*$*$\n"
              "$*$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$*$\n"
              "$*$*$*******************************************************************************************$*$*$\n"
              "$*$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$*$\n"
              "$*$***********************************************************************************************$*$\n"
              "$*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*$\n"
              "$***************************************************************************************************$\n"
              "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$";

string largeMat2 = "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
                   "%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%\n"
                   "%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%\n"
                   "%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%\n"
                   "%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%\n"
                   "%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%\n"
                   "%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%\n"
                   "%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%\n"
                   "%^%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%^%\n"
                   "%^%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%^%\n"
                   "%^%^%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%^%^%\n"
                   "%^%^%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%^%^%\n"
                   "%^%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%^%\n"
                   "%^%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%^%\n"
                   "%^%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%^%\n"
                   "%^%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%^%\n"
                   "%^%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%^%\n"
                   "%^%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%^%\n"
                   "%^%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%^%\n"
                   "%^%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^%\n"
                   "%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%\n"
                   "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";

string largeMat3 = "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";

string largeMat4 = "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%\n"
                   "%";

string invalidMat = "@@@@@@@@@\n"
             "@-------@\n"
             "@-@@@@@-@\n"
             "@-@-- -@-@\n"
             "@-@@@@@-@\n"
             "@-------@\n"
             "@@@@@@@@@";


/**
 * Returns the input string without the whitespace characters: space, newline and tab.
 * Requires std=c++2a.
 */
string nospaces(string input) {
    std::erase(input, ' ');
    std::erase(input, '\t');
    std::erase(input, '\n');
    std::erase(input, '\r');
    return input;
}


//=======================================/
/***************** Tests ****************/
//=======================================/

TEST_CASE("Good input") {
    string rslt  = mat(9, 7, '@', '-');
    CHECK((nospaces(rslt)  == nospaces(Mat)  && rslt.find(Mat) != string::npos));

    string rslt2 = mat(1, 13, '@', '-');
    CHECK((nospaces(rslt2) == nospaces(Mat2) && rslt2.find(Mat2) != string::npos));

    string rslt3 = mat(13, 1, '@', '-');
    CHECK((nospaces(rslt3) == nospaces(Mat3) && rslt3.find(Mat3) != string::npos));

    string rslt4 = mat(5, 3, '^', '^');
    CHECK((nospaces(rslt4) == nospaces(Mat4) && rslt4.find(Mat4) != string::npos));

    // Smallest inputs:
    string rslt5 = mat(1, 1, '@', '-');
    CHECK((nospaces(rslt5) == nospaces(Mat5) && rslt5.find(Mat5) != string::npos));

    string rslt6 = mat(3, 3, '$', '*');
    CHECK((nospaces(rslt6) == nospaces(Mat6) && rslt6.find(Mat6) != string::npos));
}
/**
 * Here we will have a test checks valid long mats.
 */
TEST_CASE("GOOD input - long mats") {
    string rslt  = mat(101, 101, '$', '*');
    CHECK((nospaces(rslt)  == nospaces(largeMat)  && rslt.find(largeMat) != string::npos));

    string rslt2 = mat(73, 31, '%', '^');
    CHECK((nospaces(rslt2) == nospaces(largeMat2) && rslt2.find(largeMat2) != string::npos));

    string rslt3 = mat(73, 1, '%', '^');
    CHECK((nospaces(rslt3) == nospaces(largeMat3) && rslt3.find(largeMat3) != string::npos));

    string rslt4 = mat(1, 73, '%', '^');
    CHECK((nospaces(rslt4) == nospaces(largeMat4) && rslt4.find(largeMat4) != string::npos));
}

TEST_CASE("Bad input - spaces within string"){
    string rslt  = mat(9, 7, '@', '-');
    CHECK(nospaces(rslt)  == nospaces(invalidMat));
    CHECK_FALSE((nospaces(rslt)  == nospaces(invalidMat) && rslt.find(invalidMat) != string::npos));
}

/**
 * This test checks if for even inputted Row and Col, the function raise an error, as should be.
 */
TEST_CASE("Bad input - even") {
    CHECK_THROWS(mat(10, 5, '$', '%'));
    CHECK_THROWS(mat(0, 1, '#', '-'));
    CHECK_THROWS(mat(1, 0, '#', '-'));
    CHECK_THROWS(mat(5, 2, '%', '.'));
    CHECK_THROWS(mat(0, 0, '$', '%'));
}

/**
 * This test checks if for negative inputted Row and Col, the function raise an error, as should be.
 */
TEST_CASE("Bad input - negative numbers") {
    CHECK_THROWS(mat(-1, 5, '$', '%'));
    CHECK_THROWS(mat(97, -4, '#', '-'));
    CHECK_THROWS(mat(-6, -8, '%', '.'));
    CHECK_THROWS(mat(-6, -8, '-', '-'));
}

/**
 * This test checks for cases that seem to be invalid, but they actually aren't.
 * Therefore, we will check if the function won't throw an error for those inputs.
 */
TEST_CASE("Valid input - same char") {
    CHECK_NOTHROW(mat(1, 5, '%', '%'));
}

/**
* This test checks if for space type inputted Row and Col, the function doesn't raise an error,
* as should be from the TestExample.cpp file.
*/
TEST_CASE("Valid input - space chars") {
    CHECK_NOTHROW(mat(11, 1, ' ', '%'));
    CHECK_NOTHROW(mat(9, 7, '\r', '-'));
    CHECK_NOTHROW(mat(13, 5, '\n', '.'));
    CHECK_NOTHROW(mat(15, 15, '\t', '%'));

    // same for the second char:
    CHECK_NOTHROW(mat(11, 1, '(', ' '));
    CHECK_NOTHROW(mat(9, 7, '&', '\r'));
    CHECK_NOTHROW(mat(13, 5, '~', '\n'));
    CHECK_NOTHROW(mat(15, 15, '!', '\t'));
}
